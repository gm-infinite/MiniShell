# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile_wildcard_tests                             :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: emgenc <emgenc@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/07/14 00:00:00 by emgenc            #+#    #+#              #
#    Updated: 2025/07/14 00:00:00 by emgenc           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# Compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra -Werror -g
INCLUDES = -I../main -I../wildcard_handle -I../e-libft -I../t_split_utils -I../and_or_parser

# Directories
WILDCARD_DIR = ../wildcard_handle
MAIN_DIR = ../main
LIBFT_DIR = ../e-libft
SPLIT_DIR = ../t_split_utils

# Source files for wildcard functionality
WILDCARD_SRCS = $(WILDCARD_DIR)/wildcard_handle.c \
                $(WILDCARD_DIR)/wildcard_filter.c \
                $(WILDCARD_DIR)/wildcard_filter2.c \
                $(WILDCARD_DIR)/wildcard_utils.c

# Required source files from other modules
MAIN_SRCS = $(MAIN_DIR)/quotes.c \
            $(MAIN_DIR)/main_utils.c \
            $(MAIN_DIR)/environment.c

SPLIT_SRCS = $(SPLIT_DIR)/t_split_utils.c \
             $(SPLIT_DIR)/t_split_utils2.c \
             $(SPLIT_DIR)/ft_split_quotes.c

# And_or parser utilities (contains countchr_not_quote)
AND_OR_SRCS = ../and_or_parser/and_or_utils.c

# Libft object files (assuming they exist)
LIBFT_OBJS = $(LIBFT_DIR)/ft_*.o

# All source files
SRCS = test_wildcard_unit.c $(WILDCARD_SRCS) $(MAIN_SRCS) $(SPLIT_SRCS) $(AND_OR_SRCS)

# Object files
OBJS = $(SRCS:.c=.o)

# Test executable
NAME = test_wildcard_unit

# Default target
all: libft $(NAME)

# Build libft first
libft:
	@echo "Building libft..."
	@make -C $(LIBFT_DIR)

# Build the test executable
$(NAME): $(OBJS)
	@echo "Linking test executable..."
	$(CC) $(CFLAGS) $(OBJS) $(LIBFT_DIR)/libft.a -lreadline -o $(NAME)
	@echo "Test executable created: $(NAME)"

# Compile source files
%.o: %.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Run unit tests
test_unit: $(NAME)
	@echo "Running unit tests..."
	./$(NAME)

# Run comprehensive shell tests
test_comprehensive: 
	@echo "Running comprehensive shell tests..."
	@chmod +x test_wildcard_comprehensive.sh
	./test_wildcard_comprehensive.sh

# Run all tests
test: test_unit test_comprehensive

# Clean object files
clean:
	rm -f $(OBJS)
	@make -C $(LIBFT_DIR) clean

# Clean everything
fclean: clean
	rm -f $(NAME)
	@make -C $(LIBFT_DIR) fclean

# Rebuild everything
re: fclean all

# Debug build with extra flags
debug: CFLAGS += -DDEBUG -fsanitize=address
debug: $(NAME)

# Memory leak check with valgrind
valgrind: $(NAME)
	@echo "Running unit tests with valgrind..."
	valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./$(NAME)

# Help target
help:
	@echo "Available targets:"
	@echo "  all              - Build test executable"
	@echo "  test_unit        - Run unit tests"
	@echo "  test_comprehensive - Run comprehensive shell tests"
	@echo "  test             - Run all tests"
	@echo "  debug            - Build with debug flags and AddressSanitizer"
	@echo "  valgrind         - Run tests with valgrind"
	@echo "  clean            - Remove object files"
	@echo "  fclean           - Remove all generated files"
	@echo "  re               - Rebuild everything"
	@echo "  help             - Show this help message"

.PHONY: all libft test_unit test_comprehensive test clean fclean re debug valgrind help
